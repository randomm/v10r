events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/json;

    # Enable gzip compression
    gzip on;
    gzip_types application/json text/plain;
    
    # Define log format for debugging
    log_format mock_api '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'request_body: "$request_body"';

    access_log /var/log/nginx/access.log mock_api;
    error_log /var/log/nginx/error.log debug;

    server {
        listen 80;
        server_name localhost;

        # Health check endpoint
        location /health {
            return 200 '{"status": "healthy", "service": "mock-infinity"}';
            add_header Content-Type application/json;
        }

        # Mock embedding endpoint (OpenAI compatible)
        location /v1/embeddings {
            # Only allow POST requests
            limit_except POST {
                deny all;
            }
            
            # Return mock embedding response with 100-dimensional vector (simplified for testing)
            return 200 '{
                "object": "list",
                "data": [
                    {
                        "object": "embedding",
                        "index": 0,
                        "embedding": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0, 0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88, 0.99, 0.111, -0.11, -0.22, -0.33, -0.44, -0.55, -0.66, -0.77, -0.88, -0.99, -0.111, 0.12, 0.23, 0.34, 0.45, 0.56, 0.67, 0.78, 0.89, 0.91, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67]
                    }
                ],
                "model": "text-embedding-ada-002",
                "usage": {
                    "prompt_tokens": 5,
                    "total_tokens": 5
                }
            }';
            add_header Content-Type application/json;
        }

        # Catch-all for other requests
        location / {
            return 404 '{"error": {"message": "Not found", "type": "invalid_request_error", "code": "not_found"}}';
            add_header Content-Type application/json;
        }
    }
}
