[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "v10r"
dynamic = ["version"]
description = "Generic PostgreSQL Notify-Based Vectorizer Service"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "v10r Team", email = "team@v10r.dev" },
]
keywords = [
    "postgresql",
    "vector",
    "embeddings",
    "ai",
    "ml",
    "vectorizer",
    "notify",
    "openai",
    "pgvector",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "PyYAML>=6.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    
    # Database
    "asyncpg>=0.28.0",
    "psycopg2-binary>=2.9.0",
    
    # HTTP client
    "aiohttp>=3.8.0",
    
    # Message queue
    "redis>=4.5.0",
    "aioredis>=2.0.0",
    
    # Monitoring and observability
    "prometheus-client>=0.16.0",
    "structlog>=23.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-docker-compose>=3.2.0",
    "aioresponses>=0.7.4",
    "httpx>=0.24.0",
    "asyncpg>=0.28.0",
    "redis>=4.5.0",
    "docker>=6.0.0",
    "testcontainers>=3.7.0",
    "black>=23.0.0",
    "ruff>=0.0.270",
    "mypy>=1.3.0",
    
    # Code quality
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "bandit>=1.7.0",
    
    # Documentation
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

# Production extras
rabbitmq = [
    "aio-pika>=9.0.0",
]

monitoring = [
    "opentelemetry-api>=1.15.0",
    "opentelemetry-sdk>=1.15.0",
    "opentelemetry-instrumentation-aiohttp-client>=0.36b0",
    "opentelemetry-instrumentation-asyncpg>=0.36b0",
    "opentelemetry-exporter-jaeger>=1.15.0",
]

text-processing = [
    "trafilatura>=1.6.0",
    "markdownify>=0.11.0",
    "ftfy>=6.1.0",
    "beautifulsoup4>=4.12.0",
    "unidecode>=1.3.0",
]

# All extras combined
all = [
    "v10r[rabbitmq,monitoring,text-processing]",
]

[project.urls]
Homepage = "https://github.com/v10r/v10r"
Documentation = "https://v10r.readthedocs.io"
Repository = "https://github.com/v10r/v10r"
Issues = "https://github.com/v10r/v10r/issues"

[project.scripts]
v10r = "v10r.cli:main"

[tool.hatch.version]
path = "src/v10r/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/v10r"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",  # Show extra test summary for all non-passing tests
    "--strict-markers",  # Treat unregistered markers as errors
    "--strict-config",  # Treat config issues as errors
    "--cov=src/v10r",  # Coverage for our package
    "--cov-report=term-missing",  # Show missing lines in coverage
    "--cov-report=html",  # Generate HTML coverage report
    "--cov-report=xml",  # Generate XML coverage report for CI
    "--cov-fail-under=80",  # Fail if coverage < 80%
    "--timeout=30",  # Default test timeout
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"  # Automatically handle async tests

# Test markers
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (may require external services)",
    "e2e: End-to-end tests (full system tests)",
    "slow: Slow tests (> 1 second)",
    "network: Tests requiring network access",
    "database: Tests requiring database",
    "redis: Tests requiring Redis",
    "performance: Performance and benchmark tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/v10r"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Black code formatter
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["v10r"]
known_third_party = ["pytest", "aiohttp", "asyncpg", "pydantic", "yaml", "click", "rich"]

# MyPy type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yaml.*",
    "trafilatura.*",
    "markdownify.*",
    "ftfy.*",
    "unidecode.*",
    "aioresponses.*",
]
ignore_missing_imports = true

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101"]  # Skip assert_used test 